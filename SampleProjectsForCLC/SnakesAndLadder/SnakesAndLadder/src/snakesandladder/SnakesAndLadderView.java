/*
 * SnakesAndLadderView.java
 */
package snakesandladder;

import java.awt.Color;
import java.awt.Graphics;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import snakesandladder.domain.Player;

/**
 * The application's main frame.
 */
public class SnakesAndLadderView extends FrameView {

    private Player currentPlayer;
    Player player1 = new Player("red", "Player1");
    Player player2 = new Player("yellow", "Player2");
    boolean canRollAgain;
    

    public SnakesAndLadderView(SingleFrameApplication app) {
        super(app);

        initComponents();
        this.pnlGame.setVisible(false);
        this.btnRoll.setVisible(false);
        this.txtStatus.setVisible(false);
        this.lblPlayer1.setVisible(false);
        this.lblPlayer2.setVisible(false);
        


        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        // progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    // progressBar.setVisible(true);
                    // progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    //progressBar.setVisible(false);
                    // progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    //  progressBar.setVisible(true);
                    //  progressBar.setIndeterminate(false);
                    //   progressBar.setValue(value);
                }
            }
        });

        
        
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = SnakesAndLadderApp.getApplication().getMainFrame();
            aboutBox = new SnakesAndLadderAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        SnakesAndLadderApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        pnlGame = new javax.swing.JPanel();
        lblMain = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        newGameMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        txtStatus = new javax.swing.JTextField();
        btnRoll = new javax.swing.JButton();
        lblPlayer1 = new javax.swing.JLabel();
        lblPlayer2 = new javax.swing.JLabel();
        lblDiceValue = new javax.swing.JLabel();

        mainPanel.setMaximumSize(new java.awt.Dimension(583, 560));
        mainPanel.setMinimumSize(new java.awt.Dimension(583, 560));
        mainPanel.setName("mainPanel"); // NOI18N

        pnlGame.setMaximumSize(new java.awt.Dimension(583, 560));
        pnlGame.setName("pnlGame"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(snakesandladder.SnakesAndLadderApp.class).getContext().getResourceMap(SnakesAndLadderView.class);
        lblMain.setBackground(resourceMap.getColor("lblMain.background")); // NOI18N
        lblMain.setIcon(resourceMap.getIcon("lblMain.icon")); // NOI18N
        lblMain.setText(resourceMap.getString("lblMain.text")); // NOI18N
        lblMain.setName("lblMain"); // NOI18N

        javax.swing.GroupLayout pnlGameLayout = new javax.swing.GroupLayout(pnlGame);
        pnlGame.setLayout(pnlGameLayout);
        pnlGameLayout.setHorizontalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblMain, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );
        pnlGameLayout.setVerticalGroup(
            pnlGameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGameLayout.createSequentialGroup()
                .addComponent(lblMain, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(pnlGame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        menuBar.setDoubleBuffered(true);
        menuBar.setMaximumSize(new java.awt.Dimension(62, 21));
        menuBar.setMinimumSize(new java.awt.Dimension(62, 21));
        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(snakesandladder.SnakesAndLadderApp.class).getContext().getActionMap(SnakesAndLadderView.class, this);
        newGameMenuItem.setAction(actionMap.get("startGame")); // NOI18N
        newGameMenuItem.setText(resourceMap.getString("newGameMenuItem.text")); // NOI18N
        newGameMenuItem.setName("newGameMenuItem"); // NOI18N
        fileMenu.add(newGameMenuItem);

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setMaximumSize(new java.awt.Dimension(583, 82));
        statusPanel.setMinimumSize(new java.awt.Dimension(583, 82));
        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        txtStatus.setText(resourceMap.getString("txtStatus.text")); // NOI18N
        txtStatus.setName("txtStatus"); // NOI18N

        btnRoll.setText(resourceMap.getString("btnRoll.text")); // NOI18N
        btnRoll.setName("btnRoll"); // NOI18N
        btnRoll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRollActionPerformed(evt);
            }
        });

        lblPlayer1.setIcon(resourceMap.getIcon("lblPlayer1.icon")); // NOI18N
        lblPlayer1.setText(resourceMap.getString("lblPlayer1.text")); // NOI18N
        lblPlayer1.setName("lblPlayer1"); // NOI18N

        lblPlayer2.setIcon(resourceMap.getIcon("lblPlayer2.icon")); // NOI18N
        lblPlayer2.setText(resourceMap.getString("lblPlayer2.text")); // NOI18N
        lblPlayer2.setName("lblPlayer2"); // NOI18N

        lblDiceValue.setText(resourceMap.getString("lblDiceValue.text")); // NOI18N
        lblDiceValue.setName("lblDiceValue"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusMessageLabel)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDiceValue, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPlayer1)
                            .addComponent(lblPlayer2))
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addGap(122, 122, 122)
                                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                                        .addComponent(statusAnimationLabel)
                                        .addContainerGap())))
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnRoll, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPlayer1)
                            .addComponent(btnRoll)))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiceValue))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusMessageLabel)
                            .addComponent(statusAnimationLabel))
                        .addGap(22, 22, 22))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(lblPlayer2)
                        .addContainerGap())))
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void btnRollActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRollActionPerformed
        // TODO add your handling code here:
        
        double l = Math.ceil(Math.random() * 6);
        boolean status = getCurrentPlayer().isStatus();
        this.lblDiceValue.setText("dice rolles out number.." + (int) l);

        if (l == 1 || l == 6) {
            canRollAgain = true;
        }
        //when status is false
        if (!status) {
            //Not 1 or 6
            if ((l < 6) && (l > 1)) {
                if (currentPlayer.getName().equals("Player1")) {
                    this.txtStatus.setText("Player 2's turn to roll the dice!");
                    this.setCurrentPlayer(player2);
                } else {
                    this.txtStatus.setText("Player 1's turn to roll the dice!");
                    this.setCurrentPlayer(player1);
                }
            } else {
                if (currentPlayer.getName().equals("Player1")) {
                    this.player1.setStatus(true);
                    this.txtStatus.setText("Player " + this.currentPlayer.getName() + "'s turn to roll the dice again!");
                } else {
                    this.player2.setStatus(true);
                    this.txtStatus.setText("Player " + this.currentPlayer.getName() + "'s turn to roll the dice again!");
                }
                canRollAgain = false;
            }
            //when status is true
        } else {
            if (canRollAgain){
                this.move(l);
                this.txtStatus.setText("Player " + this.currentPlayer.getName() + "'s turn to roll the dice again!");
                canRollAgain = false;
            }else{
                this.move(l);
               if (currentPlayer.getName().equals("Player1")) {
                    this.txtStatus.setText("Player 2's turn to roll the dice!");
                    this.setCurrentPlayer(player2);
                } else {
                    this.txtStatus.setText("Player 1's turn to roll the dice!");
                    this.setCurrentPlayer(player1);
                }
            }

        }

    }//GEN-LAST:event_btnRollActionPerformed

    @Action
    public void startGame() {
        txtStatus.setEditable(false);
        this.pnlGame.setVisible(true);
        this.btnRoll.setVisible(true);
        this.txtStatus.setVisible(true);
        this.lblPlayer1.setVisible(true);
        this.lblPlayer2.setVisible(true);

        this.setCurrentPlayer(player1);
        this.txtStatus.setText("Player 1's turn to roll the dice");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRoll;
    private javax.swing.JLabel lblDiceValue;
    private javax.swing.JLabel lblMain;
    private javax.swing.JLabel lblPlayer1;
    private javax.swing.JLabel lblPlayer2;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JPanel pnlGame;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JTextField txtStatus;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    /**
     * @return the currentPlayer
     */
    public Player getCurrentPlayer() {
        return currentPlayer;
    }

    /**
     * @param currentPlayer the currentPlayer to set
     */
    public void setCurrentPlayer(Player currentPlayer) {
        this.currentPlayer = currentPlayer;
    }

    private void move(double l) {
        currentPlayer.setPosition(currentPlayer.getPosition() + (int) l);
        changeActualPostion();
        if (currentPlayer.getPosition()>=64){
            this.txtStatus.setText(this.currentPlayer.getName() + " wins!!!!");
            this.btnRoll.setEnabled(false);
        }
        try {
            BufferedImage image = ImageIO.read(new File("lib/board.gif"));
            Graphics g = image.getGraphics();
            int transparency = 90;

            Color color =new Color(255, 0, 0, 255 * transparency / 100);

                int x = getX(player1.getPosition());
                int y = getY(player1.getPosition());
                g.setColor(color);
                g.fillOval(x, y, 30, 30);

            
            
                int x2 = getX(player2.getPosition());
                int y2 = getY(player2.getPosition());
                color = new Color(255, 255, 0, 255 * transparency / 100);
                g.setColor(color);
                g.fillOval(x2, y2, 30, 30);

            ImageIcon icon = new ImageIcon(image);
            icon.getImage().flush();
            lblMain.setIcon(icon);

            //ImageIO.write(image, "jpg", new File("d:\\temp\\output.bmp"));
            

        } catch (Exception e) {

            System.out.println(e);

        }
        if (currentPlayer.getName().equals("Player1")) {
            this.player1.setPosition(currentPlayer.getPosition());
        } else {
            this.player2.setPosition(currentPlayer.getPosition());
        }



    }

    
    private void rollAgain() {
        double l = Math.ceil(Math.random() * 6);
        this.lblDiceValue.setText("Dice rolles out number......." + (int) l);
        move(l);
    }

    private void changeActualPostion() {
        switch (currentPlayer.getPosition()) {
            case 3:
                currentPlayer.setPosition(18);
                break;
            case 19:
                currentPlayer.setPosition(5);
                break;
            case 24:
                currentPlayer.setPosition(39);
                break;
            case 27:
                currentPlayer.setPosition(8);
                break;
            case 29:
                currentPlayer.setPosition(53);
                break;
            case 62:
                currentPlayer.setPosition(32);
                break;
            case 58:
                currentPlayer.setPosition(41);
                break;
            case 48:
                currentPlayer.setPosition(63);
                break;
        }

    }

    private int getX(int pos) {
        int x = 0;
        switch (pos) {
            case 1:
                x = 20;
                break;
            case 2:
                x = 82;
                break;
            case 3:
                x = 82 + 62;
                break;
            case 4:
                x = 82 + 62 + 62;
                break;
            case 5:
                x = 82 + 62 + 62 + 62;
                break;
            case 6:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 7:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 8:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 9:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 10:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 11:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 12:
                x = 82 + 62 + 62 + 62;
                break;
            case 13:
                x = 82 + 62 + 62;
                break;
            case 14:
                x = 82 + 62;
                break;
            case 15:
                x = 82;
                break;
            case 16:
                x = 20;
                break;
            case 17:
                x = 20;
                break;
            case 18:
                x = 82;
                break;
            case 19:
                x = 82 + 62;
                break;
            case 20:
                x = 82 + 62 + 62;
                break;
            case 21:
                x = 82 + 62 + 62 + 62;
                break;
            case 22:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 23:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 24:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 25:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 26:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 27:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 28:
                x = 82 + 62 + 62 + 62;
                break;
            case 29:
                x = 82 + 62 + 62;
                break;
            case 30:
                x = 82 + 62;
                break;
            case 31:
                x = 82;
                break;
            case 32:
                x = 20;
                break;
            case 33:
                x = 20;
                break;
            case 34:
                x = 82;
                break;
            case 35:
                x = 82 + 62;
                break;
            case 36:
                x = 82 + 62 + 62;
                break;
            case 37:
                x = 82 + 62 + 62 + 62;
                break;
            case 38:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 39:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 40:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 41:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 42:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 43:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 44:
                x = 82 + 62 + 62 + 62;
                break;
            case 45:
                x = 82 + 62 + 62;
                break;
            case 46:
                x = 82 + 62;
                break;
            case 47:
                x = 82;
                break;
            case 48:
                x = 20;
                break;
            case 49:
                x = 20;
                break;
            case 50:
                x = 82;
                break;
            case 51:
                x = 82 + 62;
                break;
            case 52:
                x = 82 + 62 + 62;
                break;
            case 53:
                x = 82 + 62 + 62 + 62;
                break;
            case 54:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 55:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 56:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 57:
                x = 82 + 62 + 62 + 62 + 62 + 62 + 62;
                break;
            case 58:
                x = 82 + 62 + 62 + 62 + 62 + 62;
                break;
            case 59:
                x = 82 + 62 + 62 + 62 + 62;
                break;
            case 60:
                x = 82 + 62 + 62 + 62;
                break;
            case 61:
                x = 82 + 62 + 62;
                break;
            case 62:
                x = 82 + 62;
                break;
            case 63:
                x = 82;
                break;
            case 64:
                x = 20;
                break;

        }
        return x;
    }

    private int getY(int pos) {
        int y = 0;
        if (pos > 0 && pos < 9) {
            y = 60 + 62 + 62 + 62 + 62 + 62 + 62 + 62;
        }
        if (pos > 8 && pos < 17) {
            y = 60 + 62 + 62 + 62 + 62 + 62 + 62;
        }
        if (pos > 16 && pos < 25) {
            y = 60 + 62 + 62 + 62 + 62 + 62;
        }
        if (pos > 24 && pos < 33) {
            y = 60 + 62 + 62 + 62 + 62;
        }
        if (pos > 32 && pos < 41) {
            y = 60 + 62 + 62 + 62;
        }
        if (pos > 40 && pos < 49) {
            y = 60 + 62 + 62;
        }
        if (pos > 48 && pos < 57) {
            y = 60 + 62;
        }
        if (pos > 56) {
            y = 60;
        }
        return y;
    }
}
